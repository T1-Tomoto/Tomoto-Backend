name: CD with Gradle and Docker

on:
  push:
    branches:
      - 'dev'
      - 'main'
  pull_request:
    branches:
      - 'dev'
      - 'main'

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: ☕️ Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'
          server-id: github
          setting-path: ${{ github.workspace }}

      - name: 👏🏻 Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: 🐘 Build with Gradle (without test)
        run: ./gradlew clean build -x test --stacktrace

      - name: 🐳 Docker build & push
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build -f Dockerfile -t ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_IMAGE }} .
          docker push ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_IMAGE }}

      - name: 🚀 Deploy to server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_KEY }}
          port: ${{ secrets.EC2_PORT }}
          envs: GITHUB_SHA
          script: |
            echo "✋🏻Stopping existing container"
            sudo docker stop tomoto-server || true
            sudo docker rm tomoto-server || true

            echo "📦 Checking all containers"
            sudo docker ps -a

            echo "🥳 Pulling new image"
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_IMAGE }}

            echo "🌱 Running new container"
            sudo docker run -d \
              -p 8000:8080 \
              --name tomoto-server \
              -e SPRING_DATASOURCE_URL=${{ secrets.MYSQL_URL }} \
              -e SPRING_DATASOURCE_USERNAME=${{ secrets.MYSQL_USER }} \
              -e SPRING_DATASOURCE_PASSWORD=${{ secrets.MYSQL_PASSWORD }} \
              ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_IMAGE }}


            echo "🚮 Cleaning up old images"
            sudo docker image prune -f
